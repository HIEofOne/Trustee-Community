{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/core/exception-types.ts", "../../src/core/json-rpc-types.ts", "../../src/core/message-types.ts", "../../src/modules/rpc-provider-types.ts"],
  "sourcesContent": ["// Only re-export types that are intended for the public API from this file.\n// Deprecate test API key in v7.0.0\n\nexport * from './core/exception-types';\nexport * from './core/i18n';\nexport * from './core/json-rpc-types';\nexport * from './core/message-types';\nexport * from './core/query-types';\n\nexport * from './modules/auth-types';\nexport * from './modules/rpc-provider-types';\nexport * from './modules/user-types';\n", "export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n", "import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n}\n", "import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n", "export type EthNetworkName = 'mainnet' | 'rinkeby' | 'ropsten' | 'kovan';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"],
  "mappings": "8gBAAA,yLCAO,GAAK,GAAL,CAAK,GACV,iBAAgB,kBAChB,gBAAgB,kBAChB,oBAAoB,qBACpB,kBAAkB,mBAClB,0BAA0B,4BAC1B,yBAAyB,0BANf,WASA,EAAL,CAAK,GACV,kBAAiB,mBACjB,kBAAkB,mBAClB,mCAAmC,sCACnC,oBAAoB,qBAJV,WAOA,EAAL,CAAK,GAEV,gBAAa,QAAb,aACA,mBAAiB,QAAjB,iBACA,mBAAiB,QAAjB,iBACA,kBAAgB,QAAhB,gBACA,kBAAgB,QAAhB,gBAGA,gCAA8B,MAA9B,8BACA,qBAAmB,QAAnB,mBACA,yBAAuB,QAAvB,uBACA,gCAA8B,QAA9B,8BACA,wBAAsB,QAAtB,sBACA,sBAAoB,QAApB,oBACA,yBAAuB,QAAvB,uBACA,sBAAoB,QAApB,oBACA,uBAAqB,QAArB,qBAjBU,WCyBL,GAAK,GAAL,CAAK,GACV,gBAAe,4BACf,oBAAoB,kCACpB,qBAAqB,mCACrB,sBAAsB,mCACtB,aAAa,0BACb,kBAAkB,+BAClB,cAAc,0BACd,aAAa,0BACb,SAAS,oBACT,cAAc,0BACd,eAAe,sBACf,uBAAuB,mCACvB,uBAAuB,yCACvB,4BAA4B,+CAC5B,6BAA6B,2CAC7B,8BAA8B,gDAC9B,qBAAqB,uCACrB,0BAA0B,4CAC1B,sBAAsB,uCACtB,qBAAqB,uCACrB,iBAAiB,iCACjB,sBAAsB,uCAtBZ,WCvCL,GAAK,GAAL,CAAK,GACV,yBAAwB,wBACxB,sBAAsB,sBACtB,qBAAqB,qBACrB,qBAAqB,qBACrB,qBAAqB,qBALX,WAQA,EAAL,CAAK,GACV,wBAAuB,uBADb,WCRL,GAAK,GAAL,CAAK,GACV,WAAU,UADA",
  "names": []
}
